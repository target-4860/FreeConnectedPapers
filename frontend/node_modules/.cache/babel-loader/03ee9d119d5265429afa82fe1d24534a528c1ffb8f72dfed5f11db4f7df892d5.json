{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"data-source-panel\"\n};\nconst _hoisted_2 = {\n  class: \"source-tabs\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"count\"\n};\nconst _hoisted_5 = {\n  class: \"source-content\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"item-title\"\n};\nconst _hoisted_8 = {\n  class: \"item-meta\"\n};\nconst _hoisted_9 = {\n  class: \"item-source-type\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"item-year\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"item-authors\"\n};\nconst _hoisted_12 = {\n  key: 1,\n  class: \"no-items\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"panel-header\"\n  }, [_createElementVNode(\"h2\", null, \"数据来源\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.dataSources, (source, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['source-tab', {\n        active: $data.activeSource === source.type\n      }]),\n      onClick: $event => $options.setActiveSource(source.type)\n    }, [_createTextVNode(_toDisplayString(source.name) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_4, \"(\" + _toDisplayString(source.count) + \")\", 1 /* TEXT */)], 10 /* CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_5, [$options.filteredItems.length > 0 ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList($options.filteredItems, item => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: item.id,\n      class: _normalizeClass([\"source-item\", {\n        'selected': $props.selectedItem && $props.selectedItem.id === item.id\n      }]),\n      onClick: $event => $options.selectItem(item)\n    }, [_createElementVNode(\"div\", _hoisted_7, _toDisplayString(item.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"span\", _hoisted_9, _toDisplayString($options.getSourceTypeName(item.sourceType)), 1 /* TEXT */), item.year ? (_openBlock(), _createElementBlock(\"span\", _hoisted_10, _toDisplayString(item.year), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), item.authors ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, _toDisplayString($options.formatAuthors(item.authors)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_12, \" 没有找到相关\" + _toDisplayString($options.getSourceTypeName($data.activeSource)) + \"，请尝试其他关键词 \", 1 /* TEXT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","dataSources","source","index","key","_normalizeClass","active","activeSource","type","onClick","$event","$options","setActiveSource","name","_hoisted_4","_toDisplayString","count","_hoisted_5","filteredItems","length","item","id","$props","selectedItem","selectItem","_hoisted_7","title","_hoisted_8","_hoisted_9","getSourceTypeName","sourceType","year","_hoisted_10","authors","_hoisted_11","formatAuthors","_hoisted_12"],"sources":["D:\\FreeConnectedPapers\\frontend\\src\\components\\PaperList.vue"],"sourcesContent":["<template>\r\n  <div class=\"data-source-panel\">\r\n    <div class=\"panel-header\">\r\n      <h2>数据来源</h2>\r\n    </div>\r\n    \r\n    <div class=\"source-tabs\">\r\n      <div \r\n        v-for=\"(source, index) in dataSources\" \r\n        :key=\"index\"\r\n        :class=\"['source-tab', { active: activeSource === source.type }]\"\r\n        @click=\"setActiveSource(source.type)\"\r\n      >\r\n        {{ source.name }} <span class=\"count\">({{ source.count }})</span>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"source-content\">\r\n      <template v-if=\"filteredItems.length > 0\">\r\n        <div \r\n          v-for=\"item in filteredItems\" \r\n          :key=\"item.id\" \r\n          class=\"source-item\" \r\n          :class=\"{ 'selected': selectedItem && selectedItem.id === item.id }\"\r\n          @click=\"selectItem(item)\"\r\n        >\r\n          <div class=\"item-title\">{{ item.title }}</div>\r\n          <div class=\"item-meta\">\r\n            <span class=\"item-source-type\">{{ getSourceTypeName(item.sourceType) }}</span>\r\n            <span class=\"item-year\" v-if=\"item.year\">{{ item.year }}</span>\r\n          </div>\r\n          <div class=\"item-authors\" v-if=\"item.authors\">{{ formatAuthors(item.authors) }}</div>\r\n        </div>\r\n      </template>\r\n      \r\n      <div v-else class=\"no-items\">\r\n        没有找到相关{{ getSourceTypeName(activeSource) }}，请尝试其他关键词\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'DataSourcePanel',\r\n  props: {\r\n    searchQuery: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    selectedItem: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      activeSource: 'all', // all, textbook, paper, emr, guideline\r\n      dataSources: [\r\n        { type: 'all', name: '全部', count: 0 },\r\n        { type: 'textbook', name: '教材', count: 0 },\r\n        { type: 'paper', name: '论文', count: 0 },\r\n        { type: 'emr', name: '电子病历', count: 0 },\r\n        { type: 'guideline', name: '临床指南', count: 0 }\r\n      ],\r\n      items: []\r\n    }\r\n  },\r\n  computed: {\r\n    filteredItems() {\r\n      if (this.activeSource === 'all') {\r\n        return this.items;\r\n      }\r\n      return this.items.filter(item => item.sourceType === this.activeSource);\r\n    }\r\n  },\r\n  methods: {\r\n    setActiveSource(sourceType) {\r\n      this.activeSource = sourceType;\r\n    },\r\n    \r\n    selectItem(item) {\r\n      this.$emit('select-item', item);\r\n    },\r\n    \r\n    formatAuthors(authors) {\r\n      if (!authors || authors.length === 0) return '';\r\n      if (authors.length === 1) return authors[0];\r\n      return authors.slice(0, 2).join(', ') + (authors.length > 2 ? ' 等' : '');\r\n    },\r\n    \r\n    getSourceTypeName(type) {\r\n      const source = this.dataSources.find(s => s.type === type);\r\n      return source ? source.name : '';\r\n    },\r\n    \r\n    updateSourceCounts() {\r\n      // 更新各数据源的数量\r\n      this.dataSources.forEach(source => {\r\n        if (source.type === 'all') {\r\n          source.count = this.items.length;\r\n        } else {\r\n          source.count = this.items.filter(item => item.sourceType === source.type).length;\r\n        }\r\n      });\r\n    },\r\n    \r\n    loadItems(query) {\r\n      // 这里应该调用API获取搜索结果\r\n      // 模拟API调用\r\n      this.isLoading = true;\r\n      \r\n      setTimeout(() => {\r\n        // 示例数据\r\n        this.items = this.generateSampleData(query);\r\n        this.updateSourceCounts();\r\n        this.isLoading = false;\r\n        \r\n        // 如果有结果，默认选中第一个\r\n        if (this.items.length > 0) {\r\n          this.$emit('select-item', this.items[0]);\r\n        }\r\n      }, 500);\r\n    },\r\n    \r\n    generateSampleData(query) {\r\n      // 生成示例数据\r\n      const sampleData = [\r\n        {\r\n          id: 1,\r\n          title: '内科学（第9版）',\r\n          sourceType: 'textbook',\r\n          authors: ['葛均波', '徐永健'],\r\n          year: 2018,\r\n          publisher: '人民卫生出版社',\r\n          keywords: ['高血压', '糖尿病', '心血管疾病'],\r\n          sections: [\r\n            {\r\n              title: '第5章 高血压',\r\n              content: `高血压是常见的慢性病，是心脑血管疾病的主要危险因素。随着人口老龄化，高血压的患病率逐年升高。高血压是以体循环动脉压增高为主要特征的临床综合征，可伴有心、脑、肾等器官的功能或器质性损害。`\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'Hypertension Management in 2023: A Comprehensive Review',\r\n          sourceType: 'paper',\r\n          authors: ['Smith J', 'Johnson R', 'Williams T'],\r\n          year: 2023,\r\n          journal: 'Journal of Hypertension',\r\n          keywords: ['高血压', '治疗', '管理'],\r\n          abstract: '本文综述了高血压管理的最新进展，包括诊断标准、药物治疗和生活方式干预。'\r\n        },\r\n        {\r\n          id: 3,\r\n          title: '某三甲医院高血压患者电子病历分析',\r\n          sourceType: 'emr',\r\n          year: 2022,\r\n          hospital: '北京协和医院',\r\n          patientCount: 500,\r\n          keywords: ['高血压', '并发症', '治疗效果'],\r\n          summary: '本研究分析了500例高血压患者的电子病历数据，探讨了不同治疗方案的效果比较。'\r\n        },\r\n        {\r\n          id: 4,\r\n          title: '中国高血压防治指南（2023年修订版）',\r\n          sourceType: 'guideline',\r\n          authors: ['中国高血压联盟', '中华医学会心血管病学分会'],\r\n          year: 2023,\r\n          organization: '中国高血压联盟',\r\n          keywords: ['高血压', '诊断', '治疗', '随访'],\r\n          recommendations: [\r\n            '建议所有成人定期测量血压',\r\n            '对于一级高血压患者，建议首先进行生活方式干预'\r\n          ]\r\n        },\r\n        {\r\n          id: 5,\r\n          title: '病理生理学（第3版）',\r\n          sourceType: 'textbook',\r\n          authors: ['王建枝', '殷莲华'],\r\n          year: 2020,\r\n          publisher: '高等教育出版社',\r\n          keywords: ['高血压', '病理机制', '肾素-血管紧张素系统'],\r\n          sections: [\r\n            {\r\n              title: '第7章 高血压的病理生理学',\r\n              content: `高血压的发病机制复杂，包括肾素-血管紧张素-醛固酮系统激活、交感神经系统功能亢进、血管内皮功能障碍等多种因素。`\r\n            }\r\n          ]\r\n        }\r\n      ];\r\n      \r\n      // 根据查询词过滤\r\n      if (query) {\r\n        const lowerQuery = query.toLowerCase();\r\n        return sampleData.filter(item => \r\n          item.title.toLowerCase().includes(lowerQuery) || \r\n          (item.keywords && item.keywords.some(k => k.toLowerCase().includes(lowerQuery)))\r\n        );\r\n      }\r\n      \r\n      return sampleData;\r\n    }\r\n  },\r\n  watch: {\r\n    searchQuery: {\r\n      handler(newQuery) {\r\n        if (newQuery) {\r\n          this.loadItems(newQuery);\r\n        }\r\n      },\r\n      immediate: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.data-source-panel {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background-color: #fafafa;\r\n}\r\n\r\n.panel-header {\r\n  padding: 1rem;\r\n  background-color: #f0f0f0;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.panel-header h2 {\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  color: #444;\r\n  margin: 0;\r\n}\r\n\r\n.source-tabs {\r\n  display: flex;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.source-tab {\r\n  padding: 0.8rem 1rem;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n  transition: all 0.2s;\r\n  border-bottom: 2px solid transparent;\r\n}\r\n\r\n.source-tab:hover {\r\n  color: #2a7d8b;\r\n  background-color: #f0f7f9;\r\n}\r\n\r\n.source-tab.active {\r\n  color: #2a7d8b;\r\n  border-bottom-color: #2a7d8b;\r\n  background-color: #e6f3f7;\r\n  font-weight: 500;\r\n}\r\n\r\n.count {\r\n  font-size: 0.8rem;\r\n  color: #888;\r\n}\r\n\r\n.source-content {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 0.5rem 0;\r\n}\r\n\r\n.source-item {\r\n  padding: 1rem;\r\n  border-bottom: 1px solid #eee;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.source-item:hover {\r\n  background-color: #f0f7f9;\r\n}\r\n\r\n.source-item.selected {\r\n  background-color: #e6f3f7;\r\n  border-left: 4px solid #2a7d8b;\r\n}\r\n\r\n.item-title {\r\n  font-weight: 500;\r\n  margin-bottom: 0.5rem;\r\n  color: #333;\r\n}\r\n\r\n.item-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 0.8rem;\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.item-source-type {\r\n  color: #2a7d8b;\r\n  font-weight: 500;\r\n  background-color: #e6f3f7;\r\n  padding: 0.2rem 0.4rem;\r\n  border-radius: 3px;\r\n}\r\n\r\n.item-year {\r\n  color: #888;\r\n}\r\n\r\n.item-authors {\r\n  font-size: 0.85rem;\r\n  color: #666;\r\n}\r\n\r\n.no-items {\r\n  padding: 2rem;\r\n  text-align: center;\r\n  color: #888;\r\n  font-style: italic;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAmB;;EAKvBA,KAAK,EAAC;AAAa;;;EAOIA,KAAK,EAAC;AAAO;;EAIpCA,KAAK,EAAC;AAAgB;;;EAShBA,KAAK,EAAC;AAAY;;EAClBA,KAAK,EAAC;AAAW;;EACdA,KAAK,EAAC;AAAkB;;;EACxBA,KAAK,EAAC;;;;EAETA,KAAK,EAAC;;;;EAIHA,KAAK,EAAC;;;uBAlCtBC,mBAAA,CAsCM,OAtCNC,UAsCM,G,0BArCJC,mBAAA,CAEM;IAFDH,KAAK,EAAC;EAAc,IACvBG,mBAAA,CAAa,YAAT,MAAI,E,sBAGVA,mBAAA,CASM,OATNC,UASM,I,kBARJH,mBAAA,CAOMI,SAAA,QAAAC,WAAA,CANsBC,KAAA,CAAAC,WAAW,GAA7BC,MAAM,EAAEC,KAAK;yBADvBT,mBAAA,CAOM;MALHU,GAAG,EAAED,KAAK;MACVV,KAAK,EAAAY,eAAA;QAAAC,MAAA,EAA2BN,KAAA,CAAAO,YAAY,KAAKL,MAAM,CAACM;MAAI;MAC5DC,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,CAACV,MAAM,CAACM,IAAI;0CAEhCN,MAAM,CAACW,IAAI,IAAG,GAAC,iBAAAjB,mBAAA,CAA+C,QAA/CkB,UAA+C,EAA3B,GAAC,GAAAC,gBAAA,CAAGb,MAAM,CAACc,KAAK,IAAG,GAAC,gB;oCAI9DpB,mBAAA,CAqBM,OArBNqB,UAqBM,GApBYN,QAAA,CAAAO,aAAa,CAACC,MAAM,Q,kBAClCzB,mBAAA,CAaMI,SAAA;IAAAM,GAAA;EAAA,GAAAL,WAAA,CAZWY,QAAA,CAAAO,aAAa,EAArBE,IAAI;yBADb1B,mBAAA,CAaM;MAXHU,GAAG,EAAEgB,IAAI,CAACC,EAAE;MACb5B,KAAK,EAAAY,eAAA,EAAC,aAAa;QAAA,YACGiB,MAAA,CAAAC,YAAY,IAAID,MAAA,CAAAC,YAAY,CAACF,EAAE,KAAKD,IAAI,CAACC;MAAE;MAChEZ,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAa,UAAU,CAACJ,IAAI;QAEvBxB,mBAAA,CAA8C,OAA9C6B,UAA8C,EAAAV,gBAAA,CAAnBK,IAAI,CAACM,KAAK,kBACrC9B,mBAAA,CAGM,OAHN+B,UAGM,GAFJ/B,mBAAA,CAA8E,QAA9EgC,UAA8E,EAAAb,gBAAA,CAA5CJ,QAAA,CAAAkB,iBAAiB,CAACT,IAAI,CAACU,UAAU,mBACrCV,IAAI,CAACW,IAAI,I,cAAvCrC,mBAAA,CAA+D,QAA/DsC,WAA+D,EAAAjB,gBAAA,CAAnBK,IAAI,CAACW,IAAI,oB,qCAEvBX,IAAI,CAACa,OAAO,I,cAA5CvC,mBAAA,CAAqF,OAArFwC,WAAqF,EAAAnB,gBAAA,CAApCJ,QAAA,CAAAwB,aAAa,CAACf,IAAI,CAACa,OAAO,qB;kDAI/EvC,mBAAA,CAEM,OAFN0C,WAEM,EAFuB,SACrB,GAAArB,gBAAA,CAAGJ,QAAA,CAAAkB,iBAAiB,CAAC7B,KAAA,CAAAO,YAAY,KAAI,YAC7C,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}