{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"knowledge-graph-wrapper\"\n};\nconst _hoisted_2 = {\n  class: \"graph-toggle-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"knowledge-graph\"\n};\nconst _hoisted_4 = {\n  class: \"graph-controls\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_6 = {\n  ref: \"graphContainer\",\n  class: \"graph-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 知识图谱按钮 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleGraphVisibility && $options.toggleGraphVisibility(...args)),\n    class: \"toggle-button\"\n  }, _toDisplayString($data.isVisible ? '隐藏知识图谱' : '显示知识图谱'), 1 /* TEXT */)]), $data.isVisible ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.resetGraph && $options.resetGraph(...args)),\n    class: \"control-button\"\n  }, \" 重置视图 \"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.centerGraph && $options.centerGraph(...args)),\n    class: \"control-button\"\n  }, \" 居中 \")]), $data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _cache[3] || (_cache[3] = [_createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"div\", {\n    class: \"loading-text\"\n  }, \"加载中...\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_6, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","onClick","_cache","args","$options","toggleGraphVisibility","$data","isVisible","_hoisted_3","_hoisted_4","resetGraph","centerGraph","isLoading","_hoisted_5","_hoisted_6"],"sources":["D:\\FreeConnectedPapers\\frontend\\src\\components\\KnowledgeGraph.vue"],"sourcesContent":["<template>\r\n  <div class=\"knowledge-graph-wrapper\">\r\n    <!-- 知识图谱按钮 -->\r\n    <div class=\"graph-toggle-container\">\r\n      <button @click=\"toggleGraphVisibility\" class=\"toggle-button\">\r\n        {{ isVisible ? '隐藏知识图谱' : '显示知识图谱' }}\r\n      </button>\r\n    </div>\r\n    \r\n    <div class=\"knowledge-graph\" v-if=\"isVisible\">\r\n      <div class=\"graph-controls\">\r\n        <button @click=\"resetGraph\" class=\"control-button\">\r\n          重置视图\r\n        </button>\r\n        <button @click=\"centerGraph\" class=\"control-button\">\r\n          居中\r\n        </button>\r\n      </div>\r\n      \r\n      <div class=\"loading-overlay\" v-if=\"isLoading\">\r\n        <div class=\"loading-spinner\"></div>\r\n        <div class=\"loading-text\">加载中...</div>\r\n      </div>\r\n      \r\n      <div ref=\"graphContainer\" class=\"graph-container\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\n\r\nexport default {\r\n  name: 'KnowledgeGraph',\r\n  props: {\r\n    papers: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    selectedPaper: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      simulation: null,\r\n      svg: null,\r\n      width: 0,\r\n      height: 0,\r\n      nodes: [],\r\n      links: [],\r\n      isLoading: false,\r\n      isVisible: false, // 默认隐藏知识图谱\r\n      transform: {\r\n        x: 0,\r\n        y: 0,\r\n        k: 1\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    papers: {\r\n      handler(newPapers) {\r\n        if (newPapers.length > 0 && this.isVisible) {\r\n          this.isLoading = true;\r\n          setTimeout(() => {\r\n            this.generateGraphData();\r\n            this.initializeGraph();\r\n            this.isLoading = false;\r\n          }, 500);\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n    selectedPaper(newPaper) {\r\n      if (newPaper && this.svg && this.isVisible) {\r\n        this.highlightNode(newPaper.id);\r\n      }\r\n    },\r\n    isVisible(newValue) {\r\n      if (newValue && this.papers.length > 0) {\r\n        // 当图谱变为可见时，初始化图谱\r\n        this.$nextTick(() => {\r\n          this.isLoading = true;\r\n          setTimeout(() => {\r\n            this.generateGraphData();\r\n            this.initializeGraph();\r\n            this.isLoading = false;\r\n          }, 500);\r\n        });\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    toggleGraphVisibility() {\r\n      this.isVisible = !this.isVisible;\r\n    },\r\n    \r\n    generateGraphData() {\r\n      // 生成节点数据\r\n      this.nodes = this.papers.map(paper => ({\r\n        id: paper.id,\r\n        title: paper.title,\r\n        authors: paper.authors,\r\n        year: paper.year,\r\n        citations: paper.citations_count || 0,\r\n        r: this.calculateRadius(paper.citations_count || 0),\r\n        keywords: paper.keywords || []\r\n      }));\r\n      \r\n      // 生成连接数据\r\n      this.links = [];\r\n      this.papers.forEach(paper => {\r\n        if (paper.references && paper.references.length) {\r\n          paper.references.forEach(refId => {\r\n            // 检查引用的论文是否在我们的数据集中\r\n            if (this.papers.some(p => p.id === refId)) {\r\n              this.links.push({\r\n                source: paper.id,\r\n                target: refId,\r\n                value: 1\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    },\r\n    \r\n    calculateRadius(citations) {\r\n      // 根据引用数量计算节点大小\r\n      return Math.max(Math.min(Math.log(citations + 1) * 4 + 10, 25), 10);\r\n    },\r\n    \r\n    getNodeColor(year) {\r\n      // 根据年份分配颜色\r\n      const currentYear = new Date().getFullYear();\r\n      const yearsAgo = currentYear - year;\r\n      \r\n      // 颜色范围从浅色（新）到深色（旧）\r\n      if (yearsAgo <= 1) return \"#60b3c2\"; // 最新\r\n      if (yearsAgo <= 3) return \"#3c8b9c\";\r\n      if (yearsAgo <= 5) return \"#2a7d8b\";\r\n      if (yearsAgo <= 10) return \"#1a6575\";\r\n      return \"#0d4e5d\"; // 最旧\r\n    },\r\n    \r\n    initializeGraph() {\r\n      const container = this.$refs.graphContainer;\r\n      if (!container) return;\r\n      \r\n      // 清除之前的图形\r\n      d3.select(container).selectAll(\"*\").remove();\r\n      \r\n      // 获取容器尺寸\r\n      this.width = container.clientWidth;\r\n      this.height = container.clientHeight;\r\n      \r\n      // 创建SVG\r\n      this.svg = d3.select(container)\r\n        .append(\"svg\")\r\n        .attr(\"width\", \"100%\")\r\n        .attr(\"height\", \"100%\")\r\n        .attr(\"viewBox\", [0, 0, this.width, this.height]);\r\n      \r\n      // 添加缩放和平移功能\r\n      const zoom = d3.zoom()\r\n        .scaleExtent([0.2, 3])\r\n        .on(\"zoom\", (event) => {\r\n          this.transform = event.transform;\r\n          g.attr(\"transform\", event.transform);\r\n        });\r\n      \r\n      this.svg.call(zoom);\r\n      \r\n      const g = this.svg.append(\"g\");\r\n      \r\n      // 创建力导向图\r\n      this.simulation = d3.forceSimulation(this.nodes)\r\n        .force(\"link\", d3.forceLink(this.links).id(d => d.id).distance(100))\r\n        .force(\"charge\", d3.forceManyBody().strength(-300))\r\n        .force(\"center\", d3.forceCenter(this.width / 2, this.height / 2))\r\n        .force(\"collide\", d3.forceCollide().radius(d => d.r + 10));\r\n      \r\n      // 绘制连接线\r\n      const link = g.append(\"g\")\r\n        .attr(\"stroke\", \"#999\")\r\n        .attr(\"stroke-opacity\", 0.6)\r\n        .selectAll(\"line\")\r\n        .data(this.links)\r\n        .join(\"line\")\r\n        .attr(\"stroke-width\", d => Math.sqrt(d.value));\r\n      \r\n      // 绘制节点\r\n      const node = g.append(\"g\")\r\n        .selectAll(\".node\")\r\n        .data(this.nodes)\r\n        .join(\"g\")\r\n        .attr(\"class\", \"node\")\r\n        .call(this.drag(this.simulation));\r\n      \r\n      // 节点圆形\r\n      node.append(\"circle\")\r\n        .attr(\"r\", d => d.r)\r\n        .attr(\"fill\", d => this.getNodeColor(d.year))\r\n        .attr(\"stroke\", \"#fff\")\r\n        .attr(\"stroke-width\", 1.5)\r\n        .on(\"click\", (event, d) => {\r\n          // 点击节点时触发重新搜索\r\n          this.searchNodeKeywords(d);\r\n        });\r\n      \r\n      // 节点文本\r\n      node.append(\"text\")\r\n        .text(d => this.getTruncatedTitle(d.title))\r\n        .attr(\"dy\", d => d.r + 15)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-size\", \"8px\")\r\n        .attr(\"fill\", \"#333\");\r\n      \r\n      // 添加悬停提示\r\n      node.append(\"title\")\r\n        .text(d => `${d.title}\\n作者: ${d.authors ? d.authors.join(\", \") : \"未知\"}\\n年份: ${d.year || \"未知\"}\\n引用数: ${d.citations || 0}\\n点击可搜索相关内容`);\r\n      \r\n      // 更新力导向图\r\n      this.simulation.on(\"tick\", () => {\r\n        link\r\n          .attr(\"x1\", d => d.source.x)\r\n          .attr(\"y1\", d => d.source.y)\r\n          .attr(\"x2\", d => d.target.x)\r\n          .attr(\"y2\", d => d.target.y);\r\n        \r\n        node.attr(\"transform\", d => `translate(${d.x},${d.y})`);\r\n      });\r\n    },\r\n    \r\n    drag(simulation) {\r\n      function dragstarted(event) {\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        event.subject.fx = event.subject.x;\r\n        event.subject.fy = event.subject.y;\r\n      }\r\n      \r\n      function dragged(event) {\r\n        event.subject.fx = event.x;\r\n        event.subject.fy = event.y;\r\n      }\r\n      \r\n      function dragended(event) {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n        event.subject.fx = null;\r\n        event.subject.fy = null;\r\n      }\r\n      \r\n      return d3.drag()\r\n        .on(\"start\", dragstarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragended);\r\n    },\r\n    \r\n    getTruncatedTitle(title) {\r\n      if (!title) return '';\r\n      return title.length > 20 ? title.substring(0, 20) + '...' : title;\r\n    },\r\n    \r\n    highlightNode(nodeId) {\r\n      if (!this.svg) return;\r\n      \r\n      // 重置所有节点\r\n      this.svg.selectAll(\"circle\")\r\n        .attr(\"stroke\", \"#fff\")\r\n        .attr(\"stroke-width\", 1.5);\r\n      \r\n      // 高亮选中的节点\r\n      this.svg.selectAll(\".node\").each(function(d) {\r\n        if (d.id === nodeId) {\r\n          d3.select(this).select(\"circle\")\r\n            .attr(\"stroke\", \"#ff5722\")\r\n            .attr(\"stroke-width\", 3);\r\n        }\r\n      });\r\n    },\r\n    \r\n    resetGraph() {\r\n      if (!this.svg) return;\r\n      \r\n      const container = this.$refs.graphContainer;\r\n      const width = container.clientWidth;\r\n      const height = container.clientHeight;\r\n      \r\n      // 重置缩放和平移\r\n      this.svg.transition()\r\n        .duration(750)\r\n        .call(\r\n          d3.zoom().transform,\r\n          d3.zoomIdentity.translate(0, 0).scale(1)\r\n        );\r\n      \r\n      // 重新开始模拟\r\n      this.simulation\r\n        .alpha(0.3)\r\n        .restart();\r\n    },\r\n    \r\n    centerGraph() {\r\n      if (!this.svg || !this.selectedPaper) return;\r\n      \r\n      const container = this.$refs.graphContainer;\r\n      const width = container.clientWidth;\r\n      const height = container.clientHeight;\r\n      \r\n      // 查找选中节点\r\n      const selectedNode = this.nodes.find(n => n.id === this.selectedPaper.id);\r\n      \r\n      if (selectedNode) {\r\n        // 计算居中变换\r\n        const scale = 1.5;\r\n        const x = width / 2 - selectedNode.x * scale;\r\n        const y = height / 2 - selectedNode.y * scale;\r\n        \r\n        // 应用变换\r\n        this.svg.transition()\r\n          .duration(750)\r\n          .call(\r\n            d3.zoom().transform,\r\n            d3.zoomIdentity.translate(x, y).scale(scale)\r\n          );\r\n        \r\n        // 高亮节点\r\n        this.highlightNode(selectedNode.id);\r\n      }\r\n    },\r\n    \r\n    searchNodeKeywords(node) {\r\n      // 提取节点关键词或标题作为搜索词\r\n      let searchTerm = '';\r\n      \r\n      if (node.keywords && node.keywords.length > 0) {\r\n        // 使用第一个关键词作为搜索词\r\n        searchTerm = node.keywords[0];\r\n      } else {\r\n        // 如果没有关键词，使用标题中的前几个词\r\n        const titleWords = node.title.split(' ');\r\n        searchTerm = titleWords.length > 3 ? titleWords.slice(0, 3).join(' ') : node.title;\r\n      }\r\n      \r\n      // 触发搜索事件\r\n      this.$emit('search-term', searchTerm);\r\n    }\r\n  },\r\n  mounted() {\r\n    // 窗口大小变化时重新渲染图谱\r\n    window.addEventListener('resize', () => {\r\n      if (this.isVisible) {\r\n        this.initializeGraph();\r\n      }\r\n    });\r\n  },\r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.initializeGraph);\r\n    if (this.simulation) {\r\n      this.simulation.stop();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.knowledge-graph-wrapper {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.graph-toggle-container {\r\n  padding: 1rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  background-color: #f9fafb;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.toggle-button {\r\n  padding: 0.6rem 1.2rem;\r\n  background-color: #2a7d8b;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.toggle-button:hover {\r\n  background-color: #1a6575;\r\n}\r\n\r\n.knowledge-graph {\r\n  position: relative;\r\n  flex: 1;\r\n  width: 100%;\r\n  background-color: #f9fafb;\r\n  overflow: hidden;\r\n}\r\n\r\n.graph-container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.graph-controls {\r\n  position: absolute;\r\n  top: 1rem;\r\n  right: 1rem;\r\n  z-index: 10;\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.control-button {\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  padding: 0.4rem 0.8rem;\r\n  font-size: 0.85rem;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.control-button:hover {\r\n  background-color: #2a7d8b;\r\n  color: white;\r\n  border-color: #2a7d8b;\r\n}\r\n\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 20;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid rgba(42, 125, 139, 0.2);\r\n  border-radius: 50%;\r\n  border-top-color: #2a7d8b;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.loading-text {\r\n  margin-top: 1rem;\r\n  color: #2a7d8b;\r\n  font-weight: 500;\r\n}\r\n\r\n@keyframes spin {\r\n  to { transform: rotate(360deg); }\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAyB;;EAE7BA,KAAK,EAAC;AAAwB;;;EAM9BA,KAAK,EAAC;;;EACJA,KAAK,EAAC;AAAgB;;;EAStBA,KAAK,EAAC;;;EAKNC,GAAG,EAAC,gBAAgB;EAACD,KAAK,EAAC;;;uBAvBpCE,mBAAA,CAyBM,OAzBNC,UAyBM,GAxBJC,mBAAA,YAAe,EACfC,mBAAA,CAIM,OAJNC,UAIM,GAHJD,mBAAA,CAES;IAFAE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,qBAAA,IAAAD,QAAA,CAAAC,qBAAA,IAAAF,IAAA,CAAqB;IAAET,KAAK,EAAC;sBACxCY,KAAA,CAAAC,SAAS,uC,GAImBD,KAAA,CAAAC,SAAS,I,cAA5CX,mBAAA,CAgBM,OAhBNY,UAgBM,GAfJT,mBAAA,CAOM,OAPNU,UAOM,GANJV,mBAAA,CAES;IAFAE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAM,UAAA,IAAAN,QAAA,CAAAM,UAAA,IAAAP,IAAA,CAAU;IAAET,KAAK,EAAC;KAAiB,QAEnD,GACAK,mBAAA,CAES;IAFAE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAO,WAAA,IAAAP,QAAA,CAAAO,WAAA,IAAAR,IAAA,CAAW;IAAET,KAAK,EAAC;KAAiB,MAEpD,E,GAGiCY,KAAA,CAAAM,SAAS,I,cAA5ChB,mBAAA,CAGM,OAHNiB,UAGM,EAAAX,MAAA,QAAAA,MAAA,OAFJH,mBAAA,CAAmC;IAA9BL,KAAK,EAAC;EAAiB,4BAC5BK,mBAAA,CAAsC;IAAjCL,KAAK,EAAC;EAAc,GAAC,QAAM,oB,yCAGlCK,mBAAA,CAAwD,OAAxDe,UAAwD,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}