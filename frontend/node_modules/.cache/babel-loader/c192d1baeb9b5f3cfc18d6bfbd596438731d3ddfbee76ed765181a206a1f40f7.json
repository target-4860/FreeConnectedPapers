{"ast":null,"code":"import * as d3 from 'd3';\nexport default {\n  name: 'KnowledgeGraph',\n  props: {\n    papers: {\n      type: Array,\n      default: () => []\n    },\n    selectedPaper: {\n      type: Object,\n      default: null\n    }\n  },\n  data() {\n    return {\n      simulation: null,\n      svg: null,\n      width: 0,\n      height: 0,\n      nodes: [],\n      links: [],\n      isLoading: false,\n      isVisible: false,\n      // 默认隐藏知识图谱\n      transform: {\n        x: 0,\n        y: 0,\n        k: 1\n      }\n    };\n  },\n  watch: {\n    papers: {\n      handler(newPapers) {\n        if (newPapers.length > 0 && this.isVisible) {\n          this.isLoading = true;\n          setTimeout(() => {\n            this.generateGraphData();\n            this.initializeGraph();\n            this.isLoading = false;\n          }, 500);\n        }\n      },\n      deep: true\n    },\n    selectedPaper(newPaper) {\n      if (newPaper && this.svg && this.isVisible) {\n        this.highlightNode(newPaper.id);\n      }\n    },\n    isVisible(newValue) {\n      if (newValue && this.papers.length > 0) {\n        // 当图谱变为可见时，初始化图谱\n        this.$nextTick(() => {\n          this.isLoading = true;\n          setTimeout(() => {\n            this.generateGraphData();\n            this.initializeGraph();\n            this.isLoading = false;\n          }, 500);\n        });\n      }\n    }\n  },\n  methods: {\n    toggleGraphVisibility() {\n      this.isVisible = !this.isVisible;\n    },\n    generateGraphData() {\n      // 生成节点数据\n      this.nodes = this.papers.map(paper => ({\n        id: paper.id,\n        title: paper.title,\n        authors: paper.authors,\n        year: paper.year,\n        citations: paper.citations_count || 0,\n        r: this.calculateRadius(paper.citations_count || 0),\n        keywords: paper.keywords || []\n      }));\n\n      // 生成连接数据\n      this.links = [];\n      this.papers.forEach(paper => {\n        if (paper.references && paper.references.length) {\n          paper.references.forEach(refId => {\n            // 检查引用的论文是否在我们的数据集中\n            if (this.papers.some(p => p.id === refId)) {\n              this.links.push({\n                source: paper.id,\n                target: refId,\n                value: 1\n              });\n            }\n          });\n        }\n      });\n    },\n    calculateRadius(citations) {\n      // 根据引用数量计算节点大小\n      return Math.max(Math.min(Math.log(citations + 1) * 4 + 10, 25), 10);\n    },\n    getNodeColor(year) {\n      // 根据年份分配颜色\n      const currentYear = new Date().getFullYear();\n      const yearsAgo = currentYear - year;\n\n      // 颜色范围从浅色（新）到深色（旧）\n      if (yearsAgo <= 1) return \"#60b3c2\"; // 最新\n      if (yearsAgo <= 3) return \"#3c8b9c\";\n      if (yearsAgo <= 5) return \"#2a7d8b\";\n      if (yearsAgo <= 10) return \"#1a6575\";\n      return \"#0d4e5d\"; // 最旧\n    },\n    initializeGraph() {\n      const container = this.$refs.graphContainer;\n      if (!container) return;\n\n      // 清除之前的图形\n      d3.select(container).selectAll(\"*\").remove();\n\n      // 获取容器尺寸\n      this.width = container.clientWidth;\n      this.height = container.clientHeight;\n\n      // 创建SVG\n      this.svg = d3.select(container).append(\"svg\").attr(\"width\", \"100%\").attr(\"height\", \"100%\").attr(\"viewBox\", [0, 0, this.width, this.height]);\n\n      // 添加缩放和平移功能\n      const zoom = d3.zoom().scaleExtent([0.2, 3]).on(\"zoom\", event => {\n        this.transform = event.transform;\n        g.attr(\"transform\", event.transform);\n      });\n      this.svg.call(zoom);\n      const g = this.svg.append(\"g\");\n\n      // 创建力导向图\n      this.simulation = d3.forceSimulation(this.nodes).force(\"link\", d3.forceLink(this.links).id(d => d.id).distance(100)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(this.width / 2, this.height / 2)).force(\"collide\", d3.forceCollide().radius(d => d.r + 10));\n\n      // 绘制连接线\n      const link = g.append(\"g\").attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(this.links).join(\"line\").attr(\"stroke-width\", d => Math.sqrt(d.value));\n\n      // 绘制节点\n      const node = g.append(\"g\").selectAll(\".node\").data(this.nodes).join(\"g\").attr(\"class\", \"node\").call(this.drag(this.simulation));\n\n      // 节点圆形\n      node.append(\"circle\").attr(\"r\", d => d.r).attr(\"fill\", d => this.getNodeColor(d.year)).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1.5).on(\"click\", (event, d) => {\n        // 点击节点时触发重新搜索\n        this.searchNodeKeywords(d);\n      });\n\n      // 节点文本\n      node.append(\"text\").text(d => this.getTruncatedTitle(d.title)).attr(\"dy\", d => d.r + 15).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"8px\").attr(\"fill\", \"#333\");\n\n      // 添加悬停提示\n      node.append(\"title\").text(d => `${d.title}\\n作者: ${d.authors ? d.authors.join(\", \") : \"未知\"}\\n年份: ${d.year || \"未知\"}\\n引用数: ${d.citations || 0}\\n点击可搜索相关内容`);\n\n      // 更新力导向图\n      this.simulation.on(\"tick\", () => {\n        link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n        node.attr(\"transform\", d => `translate(${d.x},${d.y})`);\n      });\n    },\n    drag(simulation) {\n      function dragstarted(event) {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        event.subject.fx = event.subject.x;\n        event.subject.fy = event.subject.y;\n      }\n      function dragged(event) {\n        event.subject.fx = event.x;\n        event.subject.fy = event.y;\n      }\n      function dragended(event) {\n        if (!event.active) simulation.alphaTarget(0);\n        event.subject.fx = null;\n        event.subject.fy = null;\n      }\n      return d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n    },\n    getTruncatedTitle(title) {\n      if (!title) return '';\n      return title.length > 20 ? title.substring(0, 20) + '...' : title;\n    },\n    highlightNode(nodeId) {\n      if (!this.svg) return;\n\n      // 重置所有节点\n      this.svg.selectAll(\"circle\").attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1.5);\n\n      // 高亮选中的节点\n      this.svg.selectAll(\".node\").each(function (d) {\n        if (d.id === nodeId) {\n          d3.select(this).select(\"circle\").attr(\"stroke\", \"#ff5722\").attr(\"stroke-width\", 3);\n        }\n      });\n    },\n    resetGraph() {\n      if (!this.svg) return;\n      const container = this.$refs.graphContainer;\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n\n      // 重置缩放和平移\n      this.svg.transition().duration(750).call(d3.zoom().transform, d3.zoomIdentity.translate(0, 0).scale(1));\n\n      // 重新开始模拟\n      this.simulation.alpha(0.3).restart();\n    },\n    centerGraph() {\n      if (!this.svg || !this.selectedPaper) return;\n      const container = this.$refs.graphContainer;\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n\n      // 查找选中节点\n      const selectedNode = this.nodes.find(n => n.id === this.selectedPaper.id);\n      if (selectedNode) {\n        // 计算居中变换\n        const scale = 1.5;\n        const x = width / 2 - selectedNode.x * scale;\n        const y = height / 2 - selectedNode.y * scale;\n\n        // 应用变换\n        this.svg.transition().duration(750).call(d3.zoom().transform, d3.zoomIdentity.translate(x, y).scale(scale));\n\n        // 高亮节点\n        this.highlightNode(selectedNode.id);\n      }\n    },\n    searchNodeKeywords(node) {\n      // 提取节点关键词或标题作为搜索词\n      let searchTerm = '';\n      if (node.keywords && node.keywords.length > 0) {\n        // 使用第一个关键词作为搜索词\n        searchTerm = node.keywords[0];\n      } else {\n        // 如果没有关键词，使用标题中的前几个词\n        const titleWords = node.title.split(' ');\n        searchTerm = titleWords.length > 3 ? titleWords.slice(0, 3).join(' ') : node.title;\n      }\n\n      // 触发搜索事件\n      this.$emit('search-term', searchTerm);\n    }\n  },\n  mounted() {\n    // 窗口大小变化时重新渲染图谱\n    window.addEventListener('resize', () => {\n      if (this.isVisible) {\n        this.initializeGraph();\n      }\n    });\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.initializeGraph);\n    if (this.simulation) {\n      this.simulation.stop();\n    }\n  }\n};","map":{"version":3,"names":["d3","name","props","papers","type","Array","default","selectedPaper","Object","data","simulation","svg","width","height","nodes","links","isLoading","isVisible","transform","x","y","k","watch","handler","newPapers","length","setTimeout","generateGraphData","initializeGraph","deep","newPaper","highlightNode","id","newValue","$nextTick","methods","toggleGraphVisibility","map","paper","title","authors","year","citations","citations_count","r","calculateRadius","keywords","forEach","references","refId","some","p","push","source","target","value","Math","max","min","log","getNodeColor","currentYear","Date","getFullYear","yearsAgo","container","$refs","graphContainer","select","selectAll","remove","clientWidth","clientHeight","append","attr","zoom","scaleExtent","on","event","g","call","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","forceCollide","radius","link","join","sqrt","node","drag","searchNodeKeywords","text","getTruncatedTitle","dragstarted","active","alphaTarget","restart","subject","fx","fy","dragged","dragended","substring","nodeId","each","resetGraph","transition","duration","zoomIdentity","translate","scale","alpha","centerGraph","selectedNode","find","n","searchTerm","titleWords","split","slice","$emit","mounted","window","addEventListener","beforeUnmount","removeEventListener","stop"],"sources":["D:\\FreeConnectedPapers\\frontend\\src\\components\\KnowledgeGraph.vue"],"sourcesContent":["<template>\r\n  <div class=\"knowledge-graph-wrapper\">\r\n    <!-- 知识图谱按钮 -->\r\n    <div class=\"graph-toggle-container\">\r\n      <button @click=\"toggleGraphVisibility\" class=\"toggle-button\">\r\n        {{ isVisible ? '隐藏知识图谱' : '显示知识图谱' }}\r\n      </button>\r\n    </div>\r\n    \r\n    <div class=\"knowledge-graph\" v-if=\"isVisible\">\r\n      <div class=\"graph-controls\">\r\n        <button @click=\"resetGraph\" class=\"control-button\">\r\n          重置视图\r\n        </button>\r\n        <button @click=\"centerGraph\" class=\"control-button\">\r\n          居中\r\n        </button>\r\n      </div>\r\n      \r\n      <div class=\"loading-overlay\" v-if=\"isLoading\">\r\n        <div class=\"loading-spinner\"></div>\r\n        <div class=\"loading-text\">加载中...</div>\r\n      </div>\r\n      \r\n      <div ref=\"graphContainer\" class=\"graph-container\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\n\r\nexport default {\r\n  name: 'KnowledgeGraph',\r\n  props: {\r\n    papers: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    selectedPaper: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      simulation: null,\r\n      svg: null,\r\n      width: 0,\r\n      height: 0,\r\n      nodes: [],\r\n      links: [],\r\n      isLoading: false,\r\n      isVisible: false, // 默认隐藏知识图谱\r\n      transform: {\r\n        x: 0,\r\n        y: 0,\r\n        k: 1\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    papers: {\r\n      handler(newPapers) {\r\n        if (newPapers.length > 0 && this.isVisible) {\r\n          this.isLoading = true;\r\n          setTimeout(() => {\r\n            this.generateGraphData();\r\n            this.initializeGraph();\r\n            this.isLoading = false;\r\n          }, 500);\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n    selectedPaper(newPaper) {\r\n      if (newPaper && this.svg && this.isVisible) {\r\n        this.highlightNode(newPaper.id);\r\n      }\r\n    },\r\n    isVisible(newValue) {\r\n      if (newValue && this.papers.length > 0) {\r\n        // 当图谱变为可见时，初始化图谱\r\n        this.$nextTick(() => {\r\n          this.isLoading = true;\r\n          setTimeout(() => {\r\n            this.generateGraphData();\r\n            this.initializeGraph();\r\n            this.isLoading = false;\r\n          }, 500);\r\n        });\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    toggleGraphVisibility() {\r\n      this.isVisible = !this.isVisible;\r\n    },\r\n    \r\n    generateGraphData() {\r\n      // 生成节点数据\r\n      this.nodes = this.papers.map(paper => ({\r\n        id: paper.id,\r\n        title: paper.title,\r\n        authors: paper.authors,\r\n        year: paper.year,\r\n        citations: paper.citations_count || 0,\r\n        r: this.calculateRadius(paper.citations_count || 0),\r\n        keywords: paper.keywords || []\r\n      }));\r\n      \r\n      // 生成连接数据\r\n      this.links = [];\r\n      this.papers.forEach(paper => {\r\n        if (paper.references && paper.references.length) {\r\n          paper.references.forEach(refId => {\r\n            // 检查引用的论文是否在我们的数据集中\r\n            if (this.papers.some(p => p.id === refId)) {\r\n              this.links.push({\r\n                source: paper.id,\r\n                target: refId,\r\n                value: 1\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    },\r\n    \r\n    calculateRadius(citations) {\r\n      // 根据引用数量计算节点大小\r\n      return Math.max(Math.min(Math.log(citations + 1) * 4 + 10, 25), 10);\r\n    },\r\n    \r\n    getNodeColor(year) {\r\n      // 根据年份分配颜色\r\n      const currentYear = new Date().getFullYear();\r\n      const yearsAgo = currentYear - year;\r\n      \r\n      // 颜色范围从浅色（新）到深色（旧）\r\n      if (yearsAgo <= 1) return \"#60b3c2\"; // 最新\r\n      if (yearsAgo <= 3) return \"#3c8b9c\";\r\n      if (yearsAgo <= 5) return \"#2a7d8b\";\r\n      if (yearsAgo <= 10) return \"#1a6575\";\r\n      return \"#0d4e5d\"; // 最旧\r\n    },\r\n    \r\n    initializeGraph() {\r\n      const container = this.$refs.graphContainer;\r\n      if (!container) return;\r\n      \r\n      // 清除之前的图形\r\n      d3.select(container).selectAll(\"*\").remove();\r\n      \r\n      // 获取容器尺寸\r\n      this.width = container.clientWidth;\r\n      this.height = container.clientHeight;\r\n      \r\n      // 创建SVG\r\n      this.svg = d3.select(container)\r\n        .append(\"svg\")\r\n        .attr(\"width\", \"100%\")\r\n        .attr(\"height\", \"100%\")\r\n        .attr(\"viewBox\", [0, 0, this.width, this.height]);\r\n      \r\n      // 添加缩放和平移功能\r\n      const zoom = d3.zoom()\r\n        .scaleExtent([0.2, 3])\r\n        .on(\"zoom\", (event) => {\r\n          this.transform = event.transform;\r\n          g.attr(\"transform\", event.transform);\r\n        });\r\n      \r\n      this.svg.call(zoom);\r\n      \r\n      const g = this.svg.append(\"g\");\r\n      \r\n      // 创建力导向图\r\n      this.simulation = d3.forceSimulation(this.nodes)\r\n        .force(\"link\", d3.forceLink(this.links).id(d => d.id).distance(100))\r\n        .force(\"charge\", d3.forceManyBody().strength(-300))\r\n        .force(\"center\", d3.forceCenter(this.width / 2, this.height / 2))\r\n        .force(\"collide\", d3.forceCollide().radius(d => d.r + 10));\r\n      \r\n      // 绘制连接线\r\n      const link = g.append(\"g\")\r\n        .attr(\"stroke\", \"#999\")\r\n        .attr(\"stroke-opacity\", 0.6)\r\n        .selectAll(\"line\")\r\n        .data(this.links)\r\n        .join(\"line\")\r\n        .attr(\"stroke-width\", d => Math.sqrt(d.value));\r\n      \r\n      // 绘制节点\r\n      const node = g.append(\"g\")\r\n        .selectAll(\".node\")\r\n        .data(this.nodes)\r\n        .join(\"g\")\r\n        .attr(\"class\", \"node\")\r\n        .call(this.drag(this.simulation));\r\n      \r\n      // 节点圆形\r\n      node.append(\"circle\")\r\n        .attr(\"r\", d => d.r)\r\n        .attr(\"fill\", d => this.getNodeColor(d.year))\r\n        .attr(\"stroke\", \"#fff\")\r\n        .attr(\"stroke-width\", 1.5)\r\n        .on(\"click\", (event, d) => {\r\n          // 点击节点时触发重新搜索\r\n          this.searchNodeKeywords(d);\r\n        });\r\n      \r\n      // 节点文本\r\n      node.append(\"text\")\r\n        .text(d => this.getTruncatedTitle(d.title))\r\n        .attr(\"dy\", d => d.r + 15)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-size\", \"8px\")\r\n        .attr(\"fill\", \"#333\");\r\n      \r\n      // 添加悬停提示\r\n      node.append(\"title\")\r\n        .text(d => `${d.title}\\n作者: ${d.authors ? d.authors.join(\", \") : \"未知\"}\\n年份: ${d.year || \"未知\"}\\n引用数: ${d.citations || 0}\\n点击可搜索相关内容`);\r\n      \r\n      // 更新力导向图\r\n      this.simulation.on(\"tick\", () => {\r\n        link\r\n          .attr(\"x1\", d => d.source.x)\r\n          .attr(\"y1\", d => d.source.y)\r\n          .attr(\"x2\", d => d.target.x)\r\n          .attr(\"y2\", d => d.target.y);\r\n        \r\n        node.attr(\"transform\", d => `translate(${d.x},${d.y})`);\r\n      });\r\n    },\r\n    \r\n    drag(simulation) {\r\n      function dragstarted(event) {\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        event.subject.fx = event.subject.x;\r\n        event.subject.fy = event.subject.y;\r\n      }\r\n      \r\n      function dragged(event) {\r\n        event.subject.fx = event.x;\r\n        event.subject.fy = event.y;\r\n      }\r\n      \r\n      function dragended(event) {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n        event.subject.fx = null;\r\n        event.subject.fy = null;\r\n      }\r\n      \r\n      return d3.drag()\r\n        .on(\"start\", dragstarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragended);\r\n    },\r\n    \r\n    getTruncatedTitle(title) {\r\n      if (!title) return '';\r\n      return title.length > 20 ? title.substring(0, 20) + '...' : title;\r\n    },\r\n    \r\n    highlightNode(nodeId) {\r\n      if (!this.svg) return;\r\n      \r\n      // 重置所有节点\r\n      this.svg.selectAll(\"circle\")\r\n        .attr(\"stroke\", \"#fff\")\r\n        .attr(\"stroke-width\", 1.5);\r\n      \r\n      // 高亮选中的节点\r\n      this.svg.selectAll(\".node\").each(function(d) {\r\n        if (d.id === nodeId) {\r\n          d3.select(this).select(\"circle\")\r\n            .attr(\"stroke\", \"#ff5722\")\r\n            .attr(\"stroke-width\", 3);\r\n        }\r\n      });\r\n    },\r\n    \r\n    resetGraph() {\r\n      if (!this.svg) return;\r\n      \r\n      const container = this.$refs.graphContainer;\r\n      const width = container.clientWidth;\r\n      const height = container.clientHeight;\r\n      \r\n      // 重置缩放和平移\r\n      this.svg.transition()\r\n        .duration(750)\r\n        .call(\r\n          d3.zoom().transform,\r\n          d3.zoomIdentity.translate(0, 0).scale(1)\r\n        );\r\n      \r\n      // 重新开始模拟\r\n      this.simulation\r\n        .alpha(0.3)\r\n        .restart();\r\n    },\r\n    \r\n    centerGraph() {\r\n      if (!this.svg || !this.selectedPaper) return;\r\n      \r\n      const container = this.$refs.graphContainer;\r\n      const width = container.clientWidth;\r\n      const height = container.clientHeight;\r\n      \r\n      // 查找选中节点\r\n      const selectedNode = this.nodes.find(n => n.id === this.selectedPaper.id);\r\n      \r\n      if (selectedNode) {\r\n        // 计算居中变换\r\n        const scale = 1.5;\r\n        const x = width / 2 - selectedNode.x * scale;\r\n        const y = height / 2 - selectedNode.y * scale;\r\n        \r\n        // 应用变换\r\n        this.svg.transition()\r\n          .duration(750)\r\n          .call(\r\n            d3.zoom().transform,\r\n            d3.zoomIdentity.translate(x, y).scale(scale)\r\n          );\r\n        \r\n        // 高亮节点\r\n        this.highlightNode(selectedNode.id);\r\n      }\r\n    },\r\n    \r\n    searchNodeKeywords(node) {\r\n      // 提取节点关键词或标题作为搜索词\r\n      let searchTerm = '';\r\n      \r\n      if (node.keywords && node.keywords.length > 0) {\r\n        // 使用第一个关键词作为搜索词\r\n        searchTerm = node.keywords[0];\r\n      } else {\r\n        // 如果没有关键词，使用标题中的前几个词\r\n        const titleWords = node.title.split(' ');\r\n        searchTerm = titleWords.length > 3 ? titleWords.slice(0, 3).join(' ') : node.title;\r\n      }\r\n      \r\n      // 触发搜索事件\r\n      this.$emit('search-term', searchTerm);\r\n    }\r\n  },\r\n  mounted() {\r\n    // 窗口大小变化时重新渲染图谱\r\n    window.addEventListener('resize', () => {\r\n      if (this.isVisible) {\r\n        this.initializeGraph();\r\n      }\r\n    });\r\n  },\r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.initializeGraph);\r\n    if (this.simulation) {\r\n      this.simulation.stop();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.knowledge-graph-wrapper {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.graph-toggle-container {\r\n  padding: 1rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  background-color: #f9fafb;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.toggle-button {\r\n  padding: 0.6rem 1.2rem;\r\n  background-color: #2a7d8b;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.toggle-button:hover {\r\n  background-color: #1a6575;\r\n}\r\n\r\n.knowledge-graph {\r\n  position: relative;\r\n  flex: 1;\r\n  width: 100%;\r\n  background-color: #f9fafb;\r\n  overflow: hidden;\r\n}\r\n\r\n.graph-container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.graph-controls {\r\n  position: absolute;\r\n  top: 1rem;\r\n  right: 1rem;\r\n  z-index: 10;\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.control-button {\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  padding: 0.4rem 0.8rem;\r\n  font-size: 0.85rem;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.control-button:hover {\r\n  background-color: #2a7d8b;\r\n  color: white;\r\n  border-color: #2a7d8b;\r\n}\r\n\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 20;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid rgba(42, 125, 139, 0.2);\r\n  border-radius: 50%;\r\n  border-top-color: #2a7d8b;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.loading-text {\r\n  margin-top: 1rem;\r\n  color: #2a7d8b;\r\n  font-weight: 500;\r\n}\r\n\r\n@keyframes spin {\r\n  to { transform: rotate(360deg); }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}